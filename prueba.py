# -*- coding: utf-8 -*-
"""Prueba.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-aNrWNhhhlOuAVnYlfMLtUb9Lb9eOsL_
"""

import streamlit as st
import joblib
import pandas as pd
import numpy as np

# Cargar el modelo y el preprocesador
model = joblib.load('mejor_modelo_desercion.pkl')
preprocessor = joblib.load('preprocessor_desercion.pkl')

# Título de la aplicación
st.title('Sistema de Predicción de Deserción Estudiantil')

# Instrucciones
st.write('Complete el siguiente formulario para predecir el riesgo de deserción:')

# Dividir en columnas
col1, col2 = st.columns(2)

with col1:
    # Variables numéricas
    application_order = st.number_input('Orden de aplicación', min_value=0, max_value=100, value=1)
    daytime_attendance = st.selectbox('Asistencia diurna/nocturna', [1, 0], format_func=lambda x: 'Diurna' if x == 1 else 'Nocturna')
    previous_qualification_grade = st.slider('Nota de calificación previa', 0.0, 20.0, 10.0)
    admission_grade = st.slider('Nota de admisión', 0.0, 20.0, 10.0)
    age_at_enrollment = st.number_input('Edad al matricularse', min_value=15, max_value=70, value=20)

    # Variables económicas
    displaced = st.selectbox('Desplazado', [1, 0], format_func=lambda x: 'Sí' if x == 1 else 'No')
    debtor = st.selectbox('Deudor', [1, 0], format_func=lambda x: 'Sí' if x == 1 else 'No')
    tuition_up_to_date = st.selectbox('Matrícula al día', [1, 0], format_func=lambda x: 'Sí' if x == 1 else 'No')
    scholarship_holder = st.selectbox('Becario', [1, 0], format_func=lambda x: 'Sí' if x == 1 else 'No')

    # Variables del primer semestre
    cu_1st_sem_eval = st.number_input('Unidades curriculares 1er sem (evaluaciones)', min_value=0, max_value=20, value=5)
    cu_1st_sem_no_eval = st.number_input('Unidades curriculares 1er sem (sin evaluaciones)', min_value=0, max_value=20, value=0)

with col2:
    # Variables del segundo semestre
    cu_2nd_sem_credited = st.number_input('Unidades curriculares 2do sem (convalidadas)', min_value=0, max_value=20, value=0)
    cu_2nd_sem_enrolled = st.number_input('Unidades curriculares 2do sem (matriculadas)', min_value=0, max_value=20, value=5)
    cu_2nd_sem_eval = st.number_input('Unidades curriculares 2do sem (evaluaciones)', min_value=0, max_value=20, value=5)
    cu_2nd_sem_approved = st.number_input('Unidades curriculares 2do sem (aprobadas)', min_value=0, max_value=20, value=5)
    cu_2nd_sem_grade = st.slider('Nota media 2do semestre', 0.0, 20.0, 10.0)
    cu_2nd_sem_no_eval = st.number_input('Unidades curriculares 2do sem (sin evaluaciones)', min_value=0, max_value=20, value=0)

    # Variables macroeconómicas
    unemployment_rate = st.slider('Tasa de desempleo', 0.0, 30.0, 10.0)
    inflation_rate = st.slider('Tasa de inflación', -5.0, 20.0, 2.0)
    gdp = st.slider('PIB', 0.0, 5.0, 1.5)

    # Género
    gender = st.selectbox('Género', [1, 0], format_func=lambda x: 'Masculino' if x == 1 else 'Femenino')

# Variables categóricas (one-hot encoded)
st.subheader('Información Adicional')

# Dividir en pestañas para organizar mejor
tab1, tab2, tab3, tab4, tab5 = st.tabs(["Estado Civil", "Modalidad Admisión", "Curso", "Calificación Prev.", "Nacionalidad"])

with tab1:
    marital_status = st.radio('Estado civil', ['Single', 'Divorced', 'FactoUnion', 'Separated'])

with tab2:
    application_mode = st.selectbox('Modalidad de admisión', [
        'Admisión Regular',
        'Admisión Especial',
        'Admisión por Ordenanza',
        'Cambios/Transferencias',
        'Estudiantes Internacionales',
        'Mayores de 23 años'
    ])

with tab3:
    course = st.selectbox('Curso', [
        'Agricultural & Environmental Sciences',
        'Arts & Design',
        'Business & Management',
        'Communication & Media',
        'Education',
        'Engineering & Technology',
        'Health Sciences',
        'Social Sciences'
    ])

with tab4:
    previous_qualification = st.selectbox('Calificación previa', [
        'Secondary Education',
        'Higher Education',
        'Technical Education',
        'Other'
    ])

    mother_qualification = st.selectbox('Educación de la madre', [
        'Basic_or_Secondary',
        'Technical_Education',
        'Postgraduate',
        'Other_or_Unknown'
    ])

    father_qualification = st.selectbox('Educación del padre', [
        'Basic_or_Secondary',
        'Technical_Education',
        'Postgraduate',
        'Other_or_Unknown'
    ])

with tab5:
    nacionality = st.selectbox('Nacionalidad', [
        'Portuguese',
        'German',
        'Spanish',
        'Italian',
        'Dutch',
        'English',
        'Lithuanian',
        'Moldovan',
        'Romanian',
        'Santomean',
        'Turkish',
        'Colombian',
        'Cuban',
        'Mozambican'
    ])

# Botón de predicción
if st.button('Predecir Riesgo de Deserción'):
    # Crear un dataframe con todos los datos
    data = {
        'Application order': [application_order],
        'Daytime/evening attendance': [daytime_attendance],
        'Previous qualification (grade)': [previous_qualification_grade],
        'Admission grade': [admission_grade],
        'Displaced': [displaced],
        'Debtor': [debtor],
        'Tuition fees up to date': [tuition_up_to_date],
        'Gender': [gender],
        'Scholarship holder': [scholarship_holder],
        'Age at enrollment': [age_at_enrollment],
        'Curricular units 1st sem (evaluations)': [cu_1st_sem_eval],
        'Curricular units 1st sem (without evaluations)': [cu_1st_sem_no_eval],
        'Curricular units 2nd sem (credited)': [cu_2nd_sem_credited],
        'Curricular units 2nd sem (enrolled)': [cu_2nd_sem_enrolled],
        'Curricular units 2nd sem (evaluations)': [cu_2nd_sem_eval],
        'Curricular units 2nd sem (approved)': [cu_2nd_sem_approved],
        'Curricular units 2nd sem (grade)': [cu_2nd_sem_grade],
        'Curricular units 2nd sem (without evaluations)': [cu_2nd_sem_no_eval],
        'Unemployment rate': [unemployment_rate],
        'Inflation rate': [inflation_rate],
        'GDP': [gdp]
    }

    # Añadir variables one-hot encoded
    for col in [
        'Marital status_Divorced', 'Marital status_FactoUnion', 'Marital status_Separated', 'Marital status_Single',
        *[f"Application mode_{x}" for x in ['Admisión Especial', 'Admisión Regular', 'Admisión por Ordenanza',
                                          'Cambios/Transferencias', 'Estudiantes Internacionales', 'Mayores de 23 años']],
        *[f"Course_{x}" for x in ['Agricultural & Environmental Sciences', 'Arts & Design', 'Business & Management',
                                 'Communication & Media', 'Education', 'Engineering & Technology',
                                 'Health Sciences', 'Social Sciences']],
        *[f"Previous qualification_{x}" for x in ['Higher Education', 'Other', 'Secondary Education', 'Technical Education']],
        *[f"Nacionality_{x}" for x in ['Colombian', 'Cuban', 'Dutch', 'English', 'German', 'Italian',
                                      'Lithuanian', 'Moldovan', 'Mozambican', 'Portuguese', 'Romanian',
                                      'Santomean', 'Turkish']],
        *[f"Mother's qualification_{x}" for x in ['Basic_or_Secondary', 'Other_or_Unknown', 'Postgraduate', 'Technical_Education']],
        *[f"Father's qualification_{x}" for x in ['Basic_or_Secondary', 'Other_or_Unknown', 'Postgraduate']],
        *[f"Mother's occupation_{x}" for x in ['Administrative/Clerical', 'Skilled Manual Workers', 'Special Cases',
                                             'Technicians/Associate Professionals', 'Unskilled Workers']],
        *[f"Father's occupation_{x}" for x in ['Administrative/Clerical', 'Professionals', 'Skilled Manual Workers',
                                             'Special Cases', 'Technicians/Associate Professionals']]
    ]:
        data[col] = [0]

    # Establecer las variables categóricas seleccionadas
    # Estado civil
    data[f'Marital status_{marital_status}'] = [1]

    # Modalidad de admisión
    data[f'Application mode_{application_mode}'] = [1]

    # Curso
    data[f'Course_{course}'] = [1]

    # Calificación previa
    data[f'Previous qualification_{previous_qualification}'] = [1]

    # Nacionalidad
    data[f'Nacionality_{nacionality}'] = [1]

    # Calificación de los padres
    data[f"Mother's qualification_{mother_qualification}"] = [1]
    data[f"Father's qualification_{father_qualification}"] = [1]

    # Convertir a DataFrame
    input_df = pd.DataFrame(data)

    # Hacer la predicción
    try:
        prediction = model.predict(input_df)
        prediction_proba = model.predict_proba(input_df)

        # Mostrar resultados
        if prediction[0] == 1:
            st.error(f'Riesgo ALTO de deserción (probabilidad: {prediction_proba[0][1]*100:.2f}%)')
            st.write('Recomendaciones:')
            st.write('- Contactar al estudiante para ofrecer apoyo')
            st.write('- Revisar situación económica si aplica')
            st.write('- Asignar tutor académico')
        else:
            st.success(f'Riesgo BAJO de deserción (probabilidad: {prediction_proba[0][0]*100:.2f}%)')
            st.write('El estudiante muestra buen perfil de permanencia.')

        # Mostrar gráfico de probabilidad
        st.subheader('Probabilidad de Deserción')
        prob_df = pd.DataFrame({
            'Categoría': ['Bajo Riesgo', 'Alto Riesgo'],
            'Probabilidad': [prediction_proba[0][0], prediction_proba[0][1]]
        })
        st.bar_chart(prob_df.set_index('Categoría'))

    except Exception as e:
        st.error(f'Error al hacer la predicción: {str(e)}')

# Notas al pie
st.markdown("---")
st.markdown("**Nota:** Este modelo predictivo fue desarrollado usando XGBoost y está diseñado para apoyar la toma de decisiones.")